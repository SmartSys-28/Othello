#include "xparameters.h"
#include "xgpio.h"
#include "xutil.h"
#include "vga_ip.h"
#include "xps2.h"

//====================================================

int board_state[15][15];

void DrawBoard (void)
{
	int i,j,x_cor,y_cor,type,vga_input;
	for (i=0; i<15; i++) {
		for (j=0; j<15; j++) {
			x_cor=i<<24;
			y_cor=j<<16;
			type=2;
			vga_input=x_cor+y_cor+type;
		    VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
		}
    }
}

void DrawChess (int x_pos, int y_pos, int turn)
{
	int x_cor,y_cor,type,vga_input;
	type=turn;
	x_cor=x_pos<<24;
	y_cor=y_pos<<16;
	vga_input=x_cor+y_cor+type;
	VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
}

void EraseCursor (int x_pos, int y_pos)
{
	if (board_state[x_pos][y_pos]==0) {
		DrawChess(x_pos,y_pos,0);
	}
	else if (board_state[x_pos][y_pos]==1) {
		DrawChess(x_pos,y_pos,1);
	}
	else {
		DrawChess(x_pos,y_pos,2);
	}
}

int check_win(int x_pos, int y_pos, int turn)
{
	int i,j,count;
	count=1;
	for (i=x_pos+1; i<15; i++) {
		if (board_state[i][y_pos]==turn)
			count++;
		else
			break;
	}
	for (i=x_pos-1; i>=0; i--) {
		if (board_state[i][y_pos]==turn)
			count++;
		else
			break;
    }
	if (count==5)
		return 1;

	count=1;
	for (i=y_pos+1; i<15; i++) {
		if (board_state[x_pos][i]==turn)
			count++;
		else
			break;
	}
	for (i=y_pos-1; i>=0; i--) {
		if (board_state[x_pos][i]==turn)
			count++;
		else
			break;
	}
	if (count==5)
		return 1;

	count=1;
	for (i=x_pos+1,j=y_pos+1; i<15 && j<15; i++,j++) {
		if (board_state[i][j]==turn)
			count++;
		else
			break;
	}
	for (i=x_pos-1,j=y_pos-1; i>=0 && j>=0; i--,j--) {
		if (board_state[i][j]==turn)
			count++;
		else
			break;
	}
	if (count==5)
		return 1;

	count=1;
    for (i=x_pos+1,j=y_pos-1; i<15 && j>=0; i++,j--) {
	 	if (board_state[i][j]==turn)
			count++;
		else
			break;
	}
	for (i=x_pos-1,j=y_pos+1; i>=0 && j<15; i--,j++) {
		if (board_state[i][j]==turn)
			count++;
		else
			break;
	}
	if (count==5)
		return 1;

	return 0;
}

int main (void)
{
   XGpio dip;
   int dip_check;

   static XPs2 Ps2Inst;
   XPs2_Config *ConfigPtr;
   u32 StatusReg;
   u32 BytesReceived;
   u8 RxBuffer;
   int count=0;

   int i,j;
   int x_cur=7,y_cur=7;
   int turn=0;

   xil_printf("-- Game Starts! --\r\n");

   XGpio_Initialize(&dip, XPAR_DIP_SWITCHES_8BITS_DEVICE_ID);
   XGpio_SetDataDirection(&dip, 1, 0xffffffff);

   ConfigPtr = XPs2_LookupConfig(XPAR_XPS_PS2_0_0_DEVICE_ID);
   XPs2_CfgInitialize(&Ps2Inst, ConfigPtr, ConfigPtr->BaseAddress);

   for (i=0; i<15; i++) {
	   for (j=0; j<15; j++) {
		   board_state[i][j]=2;
	   }
   }
   DrawBoard();
   DrawChess(x_cur, y_cur, 3);

   while (1)
   {
	  do {
		  dip_check=XGpio_DiscreteRead(&dip, 1);
	      StatusReg = XPs2_GetStatus(&Ps2Inst);
	  }while((StatusReg & XPS2_STATUS_RX_FULL) == 0);
	  BytesReceived = XPs2_Recv(&Ps2Inst, &RxBuffer, 1);
	  count=(count+1)%3;
	  if (count==1) {
		  if (RxBuffer==0x1D) {
			  EraseCursor(x_cur, y_cur);
		      if (y_cur==0)
		    	  y_cur=14;
		      else
		    	  y_cur--;
		      DrawChess(x_cur, y_cur, 3);
		  }
		  if (RxBuffer==0x1B) {
		  	  EraseCursor(x_cur, y_cur);
		  	  if (y_cur==14)
		  	      y_cur=0;
		  	  else
		  	      y_cur++;
		  	  DrawChess(x_cur, y_cur, 3);
		  }
		  if (RxBuffer==0x1C) {
		  	  EraseCursor(x_cur, y_cur);
		  	  if (x_cur==0)
		  	      x_cur=14;
		  	  else
		  		  x_cur--;
		  	  DrawChess(x_cur, y_cur, 3);
		  }
		  if (RxBuffer==0x23) {
		  	  EraseCursor(x_cur, y_cur);
		  	  if (x_cur==14)
		  	      x_cur=0;
		  	  else
		  		  x_cur++;
		  	  DrawChess(x_cur, y_cur, 3);
		  }
		  if (RxBuffer==0x5A) {
			  if (board_state[x_cur][y_cur]==2) {
				  DrawChess(x_cur, y_cur, turn);
				  board_state[x_cur][y_cur]=turn;
				  if (check_win(x_cur,y_cur,turn)==1) {
					  xil_printf("\r\nPlayer %x wins!\r\n", turn+1);
					  return 0;
				  }
				  else
					  turn=1-turn;
			  }
		  }
		  if (RxBuffer==0x76) {
			  for (i=0; i<15; i++) {
			      for (j=0; j<15; j++) {
			          board_state[i][j]=2;
			  	  }
			  }
			  x_cur=7;
			  y_cur=7;
			  turn=0;
			  DrawBoard();
			  DrawChess(x_cur, y_cur, 3);
		  }
	  }
   }
}


